// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class UserLive extends Message {

  public static final Long DEFAULT_GID = 0L;
  public static final Long DEFAULT_UID = 0L;
  public static final String DEFAULT_FROMTIME = "";
  public static final String DEFAULT_TOTIME = "";
  public static final Long DEFAULT_MBEAN = 0L;
  public static final Integer DEFAULT_ALLGAMES = 0;
  public static final Integer DEFAULT_EFFECTIVEGAMES = 0;

  @ProtoField(tag = 1, type = UINT64, label = REQUIRED)
  public final Long gid;

  @ProtoField(tag = 2, type = UINT64, label = REQUIRED)
  public final Long uid;

  @ProtoField(tag = 3, type = STRING)
  public final String fromTime;

  @ProtoField(tag = 4, type = STRING)
  public final String toTime;

  @ProtoField(tag = 5, type = UINT64, label = REQUIRED)
  public final Long mBean;

  /**
   * 获得m豆
   */
  @ProtoField(tag = 6, type = UINT32)
  public final Integer allGames;

  /**
   * 开局次数
   */
  @ProtoField(tag = 7, type = UINT32)
  public final Integer effectiveGames;

  private UserLive(Builder builder) {
    this.gid = builder.gid;
    this.uid = builder.uid;
    this.fromTime = builder.fromTime;
    this.toTime = builder.toTime;
    this.mBean = builder.mBean;
    this.allGames = builder.allGames;
    this.effectiveGames = builder.effectiveGames;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UserLive)) return false;
    UserLive o = (UserLive) other;
    return equals(gid, o.gid)
        && equals(uid, o.uid)
        && equals(fromTime, o.fromTime)
        && equals(toTime, o.toTime)
        && equals(mBean, o.mBean)
        && equals(allGames, o.allGames)
        && equals(effectiveGames, o.effectiveGames);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = gid != null ? gid.hashCode() : 0;
      result = result * 37 + (uid != null ? uid.hashCode() : 0);
      result = result * 37 + (fromTime != null ? fromTime.hashCode() : 0);
      result = result * 37 + (toTime != null ? toTime.hashCode() : 0);
      result = result * 37 + (mBean != null ? mBean.hashCode() : 0);
      result = result * 37 + (allGames != null ? allGames.hashCode() : 0);
      result = result * 37 + (effectiveGames != null ? effectiveGames.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<UserLive> {

    public Long gid;
    public Long uid;
    public String fromTime;
    public String toTime;
    public Long mBean;
    public Integer allGames;
    public Integer effectiveGames;

    public Builder() {
    }

    public Builder(UserLive message) {
      super(message);
      if (message == null) return;
      this.gid = message.gid;
      this.uid = message.uid;
      this.fromTime = message.fromTime;
      this.toTime = message.toTime;
      this.mBean = message.mBean;
      this.allGames = message.allGames;
      this.effectiveGames = message.effectiveGames;
    }

    public Builder gid(Long gid) {
      this.gid = gid;
      return this;
    }

    public Builder uid(Long uid) {
      this.uid = uid;
      return this;
    }

    public Builder fromTime(String fromTime) {
      this.fromTime = fromTime;
      return this;
    }

    public Builder toTime(String toTime) {
      this.toTime = toTime;
      return this;
    }

    public Builder mBean(Long mBean) {
      this.mBean = mBean;
      return this;
    }

    /**
     * 获得m豆
     */
    public Builder allGames(Integer allGames) {
      this.allGames = allGames;
      return this;
    }

    /**
     * 开局次数
     */
    public Builder effectiveGames(Integer effectiveGames) {
      this.effectiveGames = effectiveGames;
      return this;
    }

    @Override
    public UserLive build() {
      checkRequiredFields();
      return new UserLive(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
