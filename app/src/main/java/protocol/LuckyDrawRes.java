// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;

public final class LuckyDrawRes extends Message {

  public static final Integer DEFAULT_PRIZEID = 0;
  public static final String DEFAULT_PRIZENAME = "";

  @ProtoField(tag = 1, type = UINT32)
  public final Integer prizeId;

  @ProtoField(tag = 2, type = STRING)
  public final String prizeName;

  private LuckyDrawRes(Builder builder) {
    this.prizeId = builder.prizeId;
    this.prizeName = builder.prizeName;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LuckyDrawRes)) return false;
    LuckyDrawRes o = (LuckyDrawRes) other;
    return equals(prizeId, o.prizeId)
        && equals(prizeName, o.prizeName);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = prizeId != null ? prizeId.hashCode() : 0;
      result = result * 37 + (prizeName != null ? prizeName.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<LuckyDrawRes> {

    public Integer prizeId;
    public String prizeName;

    public Builder() {
    }

    public Builder(LuckyDrawRes message) {
      super(message);
      if (message == null) return;
      this.prizeId = message.prizeId;
      this.prizeName = message.prizeName;
    }

    public Builder prizeId(Integer prizeId) {
      this.prizeId = prizeId;
      return this;
    }

    public Builder prizeName(String prizeName) {
      this.prizeName = prizeName;
      return this;
    }

    @Override
    public LuckyDrawRes build() {
      return new LuckyDrawRes(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
