// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT64;

public final class TaskValueReqItem extends Message {

  public static final TaskClass DEFAULT_TASKCLASS = TaskClass.Task;
  public static final Long DEFAULT_TS = 0L;

  @ProtoField(tag = 1, type = ENUM)
  public final TaskClass taskClass;

  /**
   * 分类
   */
  @ProtoField(tag = 2, type = INT64)
  public final Long ts;

  private TaskValueReqItem(Builder builder) {
    this.taskClass = builder.taskClass;
    this.ts = builder.ts;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TaskValueReqItem)) return false;
    TaskValueReqItem o = (TaskValueReqItem) other;
    return equals(taskClass, o.taskClass)
        && equals(ts, o.ts);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = taskClass != null ? taskClass.hashCode() : 0;
      result = result * 37 + (ts != null ? ts.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TaskValueReqItem> {

    public TaskClass taskClass;
    public Long ts;

    public Builder() {
    }

    public Builder(TaskValueReqItem message) {
      super(message);
      if (message == null) return;
      this.taskClass = message.taskClass;
      this.ts = message.ts;
    }

    public Builder taskClass(TaskClass taskClass) {
      this.taskClass = taskClass;
      return this;
    }

    /**
     * 分类
     */
    public Builder ts(Long ts) {
      this.ts = ts;
      return this;
    }

    @Override
    public TaskValueReqItem build() {
      return new TaskValueReqItem(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
