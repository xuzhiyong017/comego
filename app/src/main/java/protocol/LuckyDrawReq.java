// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class LuckyDrawReq extends Message {

  public static final String DEFAULT_ACTNAME = "";
  public static final String DEFAULT_CHANNEL = "";

  @ProtoField(tag = 1, type = STRING, label = REQUIRED)
  public final String actName;

  @ProtoField(tag = 2, type = STRING)
  public final String channel;

  private LuckyDrawReq(Builder builder) {
    this.actName = builder.actName;
    this.channel = builder.channel;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LuckyDrawReq)) return false;
    LuckyDrawReq o = (LuckyDrawReq) other;
    return equals(actName, o.actName)
        && equals(channel, o.channel);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = actName != null ? actName.hashCode() : 0;
      result = result * 37 + (channel != null ? channel.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<LuckyDrawReq> {

    public String actName;
    public String channel;

    public Builder() {
    }

    public Builder(LuckyDrawReq message) {
      super(message);
      if (message == null) return;
      this.actName = message.actName;
      this.channel = message.channel;
    }

    public Builder actName(String actName) {
      this.actName = actName;
      return this;
    }

    public Builder channel(String channel) {
      this.channel = channel;
      return this;
    }

    @Override
    public LuckyDrawReq build() {
      checkRequiredFields();
      return new LuckyDrawReq(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
