// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class TexasGameInfo extends Message {

  public static final Long DEFAULT_ROOMID = 0L;
  public static final Integer DEFAULT_GAMEID = 0;
  public static final TexasGameState DEFAULT_STATE = TexasGameState.TexasGame_NotStart;
  public static final List<Card> DEFAULT_CARDS = Collections.emptyList();
  public static final Integer DEFAULT_BANKER = 0;

  @ProtoField(tag = 1, type = UINT64, label = REQUIRED)
  public final Long roomId;

  @ProtoField(tag = 2, type = UINT32, label = REQUIRED)
  public final Integer gameId;

  @ProtoField(tag = 3, type = ENUM, label = REQUIRED)
  public final TexasGameState state;

  @ProtoField(tag = 4, label = REPEATED)
  public final List<Card> cards;

  /**
   * 翻牌区
   */
  @ProtoField(tag = 5, label = REQUIRED)
  public final GroupBet gameBet;

  /**
   * 小盲 最大小携带
   */
  @ProtoField(tag = 6, type = UINT32)
  public final Integer banker;

  private TexasGameInfo(Builder builder) {
    this.roomId = builder.roomId;
    this.gameId = builder.gameId;
    this.state = builder.state;
    this.cards = immutableCopyOf(builder.cards);
    this.gameBet = builder.gameBet;
    this.banker = builder.banker;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TexasGameInfo)) return false;
    TexasGameInfo o = (TexasGameInfo) other;
    return equals(roomId, o.roomId)
        && equals(gameId, o.gameId)
        && equals(state, o.state)
        && equals(cards, o.cards)
        && equals(gameBet, o.gameBet)
        && equals(banker, o.banker);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = roomId != null ? roomId.hashCode() : 0;
      result = result * 37 + (gameId != null ? gameId.hashCode() : 0);
      result = result * 37 + (state != null ? state.hashCode() : 0);
      result = result * 37 + (cards != null ? cards.hashCode() : 1);
      result = result * 37 + (gameBet != null ? gameBet.hashCode() : 0);
      result = result * 37 + (banker != null ? banker.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TexasGameInfo> {

    public Long roomId;
    public Integer gameId;
    public TexasGameState state;
    public List<Card> cards;
    public GroupBet gameBet;
    public Integer banker;

    public Builder() {
    }

    public Builder(TexasGameInfo message) {
      super(message);
      if (message == null) return;
      this.roomId = message.roomId;
      this.gameId = message.gameId;
      this.state = message.state;
      this.cards = copyOf(message.cards);
      this.gameBet = message.gameBet;
      this.banker = message.banker;
    }

    public Builder roomId(Long roomId) {
      this.roomId = roomId;
      return this;
    }

    public Builder gameId(Integer gameId) {
      this.gameId = gameId;
      return this;
    }

    public Builder state(TexasGameState state) {
      this.state = state;
      return this;
    }

    public Builder cards(List<Card> cards) {
      this.cards = checkForNulls(cards);
      return this;
    }

    /**
     * 翻牌区
     */
    public Builder gameBet(GroupBet gameBet) {
      this.gameBet = gameBet;
      return this;
    }

    /**
     * 小盲 最大小携带
     */
    public Builder banker(Integer banker) {
      this.banker = banker;
      return this;
    }

    @Override
    public TexasGameInfo build() {
      checkRequiredFields();
      return new TexasGameInfo(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
