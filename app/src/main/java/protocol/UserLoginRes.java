// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;

public final class UserLoginRes extends Message {

  public static final String DEFAULT_COOKIE = "";
  public static final Boolean DEFAULT_NEWSESSION = false;
  public static final Boolean DEFAULT_NEWUSER = false;
  public static final Long DEFAULT_FORBIDTIME = 0L;
  public static final Long DEFAULT_CURRENTTIME = 0L;
  public static final Long DEFAULT_LOGFILEUPLOAD = 0L;
  public static final Integer DEFAULT_LOGLEVEL = 0;

  @ProtoField(tag = 1, type = STRING)
  public final String cookie;

  @ProtoField(tag = 2, type = BOOL)
  public final Boolean newsession;

  @ProtoField(tag = 3)
  public final UserInfo userinfo;

  @ProtoField(tag = 4, type = BOOL)
  public final Boolean newuser;

  @ProtoField(tag = 5, type = INT64)
  public final Long forbidtime;

  /**
   * 禁止登录截止时间，0表示永久禁止
   */
  @ProtoField(tag = 6, type = INT64)
  public final Long currenttime;

  /**
   * 当时服务器时间
   */
  @ProtoField(tag = 7, type = INT64)
  public final Long logfileupload;

  /**
   * 上传指定时间以前的LOG
   */
  @ProtoField(tag = 8, type = UINT32)
  public final Integer loglevel;

  private UserLoginRes(Builder builder) {
    this.cookie = builder.cookie;
    this.newsession = builder.newsession;
    this.userinfo = builder.userinfo;
    this.newuser = builder.newuser;
    this.forbidtime = builder.forbidtime;
    this.currenttime = builder.currenttime;
    this.logfileupload = builder.logfileupload;
    this.loglevel = builder.loglevel;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UserLoginRes)) return false;
    UserLoginRes o = (UserLoginRes) other;
    return equals(cookie, o.cookie)
        && equals(newsession, o.newsession)
        && equals(userinfo, o.userinfo)
        && equals(newuser, o.newuser)
        && equals(forbidtime, o.forbidtime)
        && equals(currenttime, o.currenttime)
        && equals(logfileupload, o.logfileupload)
        && equals(loglevel, o.loglevel);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = cookie != null ? cookie.hashCode() : 0;
      result = result * 37 + (newsession != null ? newsession.hashCode() : 0);
      result = result * 37 + (userinfo != null ? userinfo.hashCode() : 0);
      result = result * 37 + (newuser != null ? newuser.hashCode() : 0);
      result = result * 37 + (forbidtime != null ? forbidtime.hashCode() : 0);
      result = result * 37 + (currenttime != null ? currenttime.hashCode() : 0);
      result = result * 37 + (logfileupload != null ? logfileupload.hashCode() : 0);
      result = result * 37 + (loglevel != null ? loglevel.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<UserLoginRes> {

    public String cookie;
    public Boolean newsession;
    public UserInfo userinfo;
    public Boolean newuser;
    public Long forbidtime;
    public Long currenttime;
    public Long logfileupload;
    public Integer loglevel;

    public Builder() {
    }

    public Builder(UserLoginRes message) {
      super(message);
      if (message == null) return;
      this.cookie = message.cookie;
      this.newsession = message.newsession;
      this.userinfo = message.userinfo;
      this.newuser = message.newuser;
      this.forbidtime = message.forbidtime;
      this.currenttime = message.currenttime;
      this.logfileupload = message.logfileupload;
      this.loglevel = message.loglevel;
    }

    public Builder cookie(String cookie) {
      this.cookie = cookie;
      return this;
    }

    public Builder newsession(Boolean newsession) {
      this.newsession = newsession;
      return this;
    }

    public Builder userinfo(UserInfo userinfo) {
      this.userinfo = userinfo;
      return this;
    }

    public Builder newuser(Boolean newuser) {
      this.newuser = newuser;
      return this;
    }

    public Builder forbidtime(Long forbidtime) {
      this.forbidtime = forbidtime;
      return this;
    }

    /**
     * 禁止登录截止时间，0表示永久禁止
     */
    public Builder currenttime(Long currenttime) {
      this.currenttime = currenttime;
      return this;
    }

    /**
     * 当时服务器时间
     */
    public Builder logfileupload(Long logfileupload) {
      this.logfileupload = logfileupload;
      return this;
    }

    /**
     * 上传指定时间以前的LOG
     */
    public Builder loglevel(Integer loglevel) {
      this.loglevel = loglevel;
      return this;
    }

    @Override
    public UserLoginRes build() {
      return new UserLoginRes(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
