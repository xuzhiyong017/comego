// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT64;

/**
 * ========== 这是一条推送消息 ===========
 */
public final class UserNotice extends Message {

  public static final Long DEFAULT_REVISION = 0L;
  public static final String DEFAULT_TITLE = "";
  public static final String DEFAULT_CONTENT = "";
  public static final Long DEFAULT_TIMESTAMP = 0L;
  public static final UserNoticeType DEFAULT_MSGTYPE = UserNoticeType.UserNoticeUnknown;
  public static final Long DEFAULT_GOLDS = 0L;
  public static final Long DEFAULT_CHIPS = 0L;

  @ProtoField(tag = 1, type = UINT64)
  public final Long revision;

  @ProtoField(tag = 2, type = STRING)
  public final String title;

  @ProtoField(tag = 3, type = STRING)
  public final String content;

  @ProtoField(tag = 4, type = INT64)
  public final Long timestamp;

  /**
   * 时间，秒
   */
  @ProtoField(tag = 5, type = ENUM)
  public final UserNoticeType msgtype;

  @ProtoField(tag = 6, type = INT64)
  public final Long golds;

  /**
   * 奖励金币数量
   */
  @ProtoField(tag = 7, type = INT64)
  public final Long chips;

  private UserNotice(Builder builder) {
    this.revision = builder.revision;
    this.title = builder.title;
    this.content = builder.content;
    this.timestamp = builder.timestamp;
    this.msgtype = builder.msgtype;
    this.golds = builder.golds;
    this.chips = builder.chips;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UserNotice)) return false;
    UserNotice o = (UserNotice) other;
    return equals(revision, o.revision)
        && equals(title, o.title)
        && equals(content, o.content)
        && equals(timestamp, o.timestamp)
        && equals(msgtype, o.msgtype)
        && equals(golds, o.golds)
        && equals(chips, o.chips);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = revision != null ? revision.hashCode() : 0;
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
      result = result * 37 + (msgtype != null ? msgtype.hashCode() : 0);
      result = result * 37 + (golds != null ? golds.hashCode() : 0);
      result = result * 37 + (chips != null ? chips.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<UserNotice> {

    public Long revision;
    public String title;
    public String content;
    public Long timestamp;
    public UserNoticeType msgtype;
    public Long golds;
    public Long chips;

    public Builder() {
    }

    public Builder(UserNotice message) {
      super(message);
      if (message == null) return;
      this.revision = message.revision;
      this.title = message.title;
      this.content = message.content;
      this.timestamp = message.timestamp;
      this.msgtype = message.msgtype;
      this.golds = message.golds;
      this.chips = message.chips;
    }

    public Builder revision(Long revision) {
      this.revision = revision;
      return this;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder content(String content) {
      this.content = content;
      return this;
    }

    public Builder timestamp(Long timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    /**
     * 时间，秒
     */
    public Builder msgtype(UserNoticeType msgtype) {
      this.msgtype = msgtype;
      return this;
    }

    public Builder golds(Long golds) {
      this.golds = golds;
      return this;
    }

    /**
     * 奖励金币数量
     */
    public Builder chips(Long chips) {
      this.chips = chips;
      return this;
    }

    @Override
    public UserNotice build() {
      return new UserNotice(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
