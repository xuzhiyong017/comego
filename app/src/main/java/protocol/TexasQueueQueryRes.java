// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;

public final class TexasQueueQueryRes extends Message {

  public static final Boolean DEFAULT_INQUEUE = false;

  @ProtoField(tag = 1, type = BOOL)
  public final Boolean inQueue;

  /**
   * 我在排队
   */
  @ProtoField(tag = 2)
  public final TexasQueueInfo queueInfo;

  private TexasQueueQueryRes(Builder builder) {
    this.inQueue = builder.inQueue;
    this.queueInfo = builder.queueInfo;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TexasQueueQueryRes)) return false;
    TexasQueueQueryRes o = (TexasQueueQueryRes) other;
    return equals(inQueue, o.inQueue)
        && equals(queueInfo, o.queueInfo);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = inQueue != null ? inQueue.hashCode() : 0;
      result = result * 37 + (queueInfo != null ? queueInfo.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TexasQueueQueryRes> {

    public Boolean inQueue;
    public TexasQueueInfo queueInfo;

    public Builder() {
    }

    public Builder(TexasQueueQueryRes message) {
      super(message);
      if (message == null) return;
      this.inQueue = message.inQueue;
      this.queueInfo = message.queueInfo;
    }

    public Builder inQueue(Boolean inQueue) {
      this.inQueue = inQueue;
      return this;
    }

    /**
     * 我在排队
     */
    public Builder queueInfo(TexasQueueInfo queueInfo) {
      this.queueInfo = queueInfo;
      return this;
    }

    @Override
    public TexasQueueQueryRes build() {
      return new TexasQueueQueryRes(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
