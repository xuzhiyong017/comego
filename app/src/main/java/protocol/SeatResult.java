// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class SeatResult extends Message {

  public static final Long DEFAULT_UID = 0L;
  public static final Integer DEFAULT_SEATID = 0;
  public static final TexasSeatState DEFAULT_STATE = TexasSeatState.TexasPlayer_Ready;
  public static final Long DEFAULT_WINCHIPS = 0L;
  public static final List<Card> DEFAULT_CARDS = Collections.emptyList();
  public static final CardType DEFAULT_CARDTYPE = CardType.Level_High;
  public static final Integer DEFAULT_RANK = 0;
  public static final List<Card> DEFAULT_FIVECARDS = Collections.emptyList();
  public static final Integer DEFAULT_PUBLICNUM = 0;

  @ProtoField(tag = 1, type = UINT64, label = REQUIRED)
  public final Long uid;

  @ProtoField(tag = 2, type = UINT32, label = REQUIRED)
  public final Integer seatId;

  @ProtoField(tag = 3, type = ENUM, label = REQUIRED)
  public final TexasSeatState state;

  @ProtoField(tag = 4, type = INT64, label = REQUIRED)
  public final Long winChips;

  /**
   * 赢取筹码
   */
  @ProtoField(tag = 5, label = REPEATED)
  public final List<Card> cards;

  /**
   * 两张手牌
   */
  @ProtoField(tag = 6, type = ENUM)
  public final CardType cardType;

  /**
   * 牌型
   */
  @ProtoField(tag = 7, type = UINT32)
  public final Integer rank;

  /**
   * 游戏结束排名
   */
  @ProtoField(tag = 8, label = REPEATED)
  public final List<Card> fiveCards;

  /**
   * 五张牌
   */
  @ProtoField(tag = 9, type = UINT32)
  public final Integer publicNum;

  private SeatResult(Builder builder) {
    this.uid = builder.uid;
    this.seatId = builder.seatId;
    this.state = builder.state;
    this.winChips = builder.winChips;
    this.cards = immutableCopyOf(builder.cards);
    this.cardType = builder.cardType;
    this.rank = builder.rank;
    this.fiveCards = immutableCopyOf(builder.fiveCards);
    this.publicNum = builder.publicNum;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SeatResult)) return false;
    SeatResult o = (SeatResult) other;
    return equals(uid, o.uid)
        && equals(seatId, o.seatId)
        && equals(state, o.state)
        && equals(winChips, o.winChips)
        && equals(cards, o.cards)
        && equals(cardType, o.cardType)
        && equals(rank, o.rank)
        && equals(fiveCards, o.fiveCards)
        && equals(publicNum, o.publicNum);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = uid != null ? uid.hashCode() : 0;
      result = result * 37 + (seatId != null ? seatId.hashCode() : 0);
      result = result * 37 + (state != null ? state.hashCode() : 0);
      result = result * 37 + (winChips != null ? winChips.hashCode() : 0);
      result = result * 37 + (cards != null ? cards.hashCode() : 1);
      result = result * 37 + (cardType != null ? cardType.hashCode() : 0);
      result = result * 37 + (rank != null ? rank.hashCode() : 0);
      result = result * 37 + (fiveCards != null ? fiveCards.hashCode() : 1);
      result = result * 37 + (publicNum != null ? publicNum.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<SeatResult> {

    public Long uid;
    public Integer seatId;
    public TexasSeatState state;
    public Long winChips;
    public List<Card> cards;
    public CardType cardType;
    public Integer rank;
    public List<Card> fiveCards;
    public Integer publicNum;

    public Builder() {
    }

    public Builder(SeatResult message) {
      super(message);
      if (message == null) return;
      this.uid = message.uid;
      this.seatId = message.seatId;
      this.state = message.state;
      this.winChips = message.winChips;
      this.cards = copyOf(message.cards);
      this.cardType = message.cardType;
      this.rank = message.rank;
      this.fiveCards = copyOf(message.fiveCards);
      this.publicNum = message.publicNum;
    }

    public Builder uid(Long uid) {
      this.uid = uid;
      return this;
    }

    public Builder seatId(Integer seatId) {
      this.seatId = seatId;
      return this;
    }

    public Builder state(TexasSeatState state) {
      this.state = state;
      return this;
    }

    public Builder winChips(Long winChips) {
      this.winChips = winChips;
      return this;
    }

    /**
     * 赢取筹码
     */
    public Builder cards(List<Card> cards) {
      this.cards = checkForNulls(cards);
      return this;
    }

    /**
     * 两张手牌
     */
    public Builder cardType(CardType cardType) {
      this.cardType = cardType;
      return this;
    }

    /**
     * 牌型
     */
    public Builder rank(Integer rank) {
      this.rank = rank;
      return this;
    }

    /**
     * 游戏结束排名
     */
    public Builder fiveCards(List<Card> fiveCards) {
      this.fiveCards = checkForNulls(fiveCards);
      return this;
    }

    /**
     * 五张牌
     */
    public Builder publicNum(Integer publicNum) {
      this.publicNum = publicNum;
      return this;
    }

    @Override
    public SeatResult build() {
      checkRequiredFields();
      return new SeatResult(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
