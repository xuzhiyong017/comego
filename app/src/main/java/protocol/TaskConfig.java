// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class TaskConfig extends Message {

  public static final Integer DEFAULT_TASKID = 0;
  public static final Long DEFAULT_TASKARGS = 0L;
  public static final String DEFAULT_TASKNAME = "";
  public static final Long DEFAULT_AWARDCHIP = 0L;
  public static final Long DEFAULT_AWARDEXP = 0L;
  public static final String DEFAULT_INFO = "";
  public static final String DEFAULT_ICON = "";

  @ProtoField(tag = 1, type = UINT32, label = REQUIRED)
  public final Integer taskId;

  /**
   * 任务id
   */
  @ProtoField(tag = 2, type = UINT64, label = REQUIRED)
  public final Long taskArgs;

  /**
   * 完成任务达到值
   */
  @ProtoField(tag = 3, type = STRING, label = REQUIRED)
  public final String taskName;

  /**
   * 任务名
   */
  @ProtoField(tag = 4, type = UINT64)
  public final Long awardChip;

  @ProtoField(tag = 5, type = UINT64)
  public final Long awardExp;

  @ProtoField(tag = 6, type = STRING)
  public final String Info;

  /**
   * 奖励及其他信息
   */
  @ProtoField(tag = 7, type = STRING)
  public final String icon;

  private TaskConfig(Builder builder) {
    this.taskId = builder.taskId;
    this.taskArgs = builder.taskArgs;
    this.taskName = builder.taskName;
    this.awardChip = builder.awardChip;
    this.awardExp = builder.awardExp;
    this.Info = builder.Info;
    this.icon = builder.icon;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TaskConfig)) return false;
    TaskConfig o = (TaskConfig) other;
    return equals(taskId, o.taskId)
        && equals(taskArgs, o.taskArgs)
        && equals(taskName, o.taskName)
        && equals(awardChip, o.awardChip)
        && equals(awardExp, o.awardExp)
        && equals(Info, o.Info)
        && equals(icon, o.icon);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = taskId != null ? taskId.hashCode() : 0;
      result = result * 37 + (taskArgs != null ? taskArgs.hashCode() : 0);
      result = result * 37 + (taskName != null ? taskName.hashCode() : 0);
      result = result * 37 + (awardChip != null ? awardChip.hashCode() : 0);
      result = result * 37 + (awardExp != null ? awardExp.hashCode() : 0);
      result = result * 37 + (Info != null ? Info.hashCode() : 0);
      result = result * 37 + (icon != null ? icon.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TaskConfig> {

    public Integer taskId;
    public Long taskArgs;
    public String taskName;
    public Long awardChip;
    public Long awardExp;
    public String Info;
    public String icon;

    public Builder() {
    }

    public Builder(TaskConfig message) {
      super(message);
      if (message == null) return;
      this.taskId = message.taskId;
      this.taskArgs = message.taskArgs;
      this.taskName = message.taskName;
      this.awardChip = message.awardChip;
      this.awardExp = message.awardExp;
      this.Info = message.Info;
      this.icon = message.icon;
    }

    public Builder taskId(Integer taskId) {
      this.taskId = taskId;
      return this;
    }

    /**
     * 任务id
     */
    public Builder taskArgs(Long taskArgs) {
      this.taskArgs = taskArgs;
      return this;
    }

    /**
     * 完成任务达到值
     */
    public Builder taskName(String taskName) {
      this.taskName = taskName;
      return this;
    }

    /**
     * 任务名
     */
    public Builder awardChip(Long awardChip) {
      this.awardChip = awardChip;
      return this;
    }

    public Builder awardExp(Long awardExp) {
      this.awardExp = awardExp;
      return this;
    }

    public Builder Info(String Info) {
      this.Info = Info;
      return this;
    }

    /**
     * 奖励及其他信息
     */
    public Builder icon(String icon) {
      this.icon = icon;
      return this;
    }

    @Override
    public TaskConfig build() {
      checkRequiredFields();
      return new TaskConfig(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
