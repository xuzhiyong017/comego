// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT64;

/**
 * ========== 这是一条推送消息 ===========
 */
public final class GroupMsg extends Message {

  public static final Long DEFAULT_REVISION = 0L;
  public static final String DEFAULT_MESSAGE = "";
  public static final Long DEFAULT_TIMESTAMP = 0L;
  public static final GroupMsgType DEFAULT_MSGTYPE = GroupMsgType.GroupMsgNormal;
  public static final Long DEFAULT_STORETIME = 0L;
  public static final String DEFAULT_EXTFIELD = "";
  public static final Long DEFAULT_REFMSG = 0L;
  public static final MessageContentType DEFAULT_CONTENTTYPE = MessageContentType.MessageContentTypeTxt;

  @ProtoField(tag = 1, type = UINT64)
  public final Long revision;

  @ProtoField(tag = 2, type = STRING)
  public final String message;

  @ProtoField(tag = 3, type = INT64)
  public final Long timestamp;

  /**
   * 秒
   */
  @ProtoField(tag = 5, type = ENUM)
  public final GroupMsgType msgtype;

  @ProtoField(tag = 6)
  public final GroupMember groupmember;

  @ProtoField(tag = 8, type = INT64)
  public final Long storetime;

  /**
   * 客户端要求存储的时间,用于重复送检测
   */
  @ProtoField(tag = 9, type = STRING)
  public final String extfield;

  /**
   * 扩展字段，客户端存储私有信息
   */
  @ProtoField(tag = 10, type = UINT64)
  public final Long refmsg;

  /**
   * 引用的消息
   */
  @ProtoField(tag = 12, type = ENUM)
  public final MessageContentType contentType;

  @ProtoField(tag = 13)
  public final GroupInfo group;

  private GroupMsg(Builder builder) {
    this.revision = builder.revision;
    this.message = builder.message;
    this.timestamp = builder.timestamp;
    this.msgtype = builder.msgtype;
    this.groupmember = builder.groupmember;
    this.storetime = builder.storetime;
    this.extfield = builder.extfield;
    this.refmsg = builder.refmsg;
    this.contentType = builder.contentType;
    this.group = builder.group;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GroupMsg)) return false;
    GroupMsg o = (GroupMsg) other;
    return equals(revision, o.revision)
        && equals(message, o.message)
        && equals(timestamp, o.timestamp)
        && equals(msgtype, o.msgtype)
        && equals(groupmember, o.groupmember)
        && equals(storetime, o.storetime)
        && equals(extfield, o.extfield)
        && equals(refmsg, o.refmsg)
        && equals(contentType, o.contentType)
        && equals(group, o.group);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = revision != null ? revision.hashCode() : 0;
      result = result * 37 + (message != null ? message.hashCode() : 0);
      result = result * 37 + (timestamp != null ? timestamp.hashCode() : 0);
      result = result * 37 + (msgtype != null ? msgtype.hashCode() : 0);
      result = result * 37 + (groupmember != null ? groupmember.hashCode() : 0);
      result = result * 37 + (storetime != null ? storetime.hashCode() : 0);
      result = result * 37 + (extfield != null ? extfield.hashCode() : 0);
      result = result * 37 + (refmsg != null ? refmsg.hashCode() : 0);
      result = result * 37 + (contentType != null ? contentType.hashCode() : 0);
      result = result * 37 + (group != null ? group.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GroupMsg> {

    public Long revision;
    public String message;
    public Long timestamp;
    public GroupMsgType msgtype;
    public GroupMember groupmember;
    public Long storetime;
    public String extfield;
    public Long refmsg;
    public MessageContentType contentType;
    public GroupInfo group;

    public Builder() {
    }

    public Builder(GroupMsg message) {
      super(message);
      if (message == null) return;
      this.revision = message.revision;
      this.message = message.message;
      this.timestamp = message.timestamp;
      this.msgtype = message.msgtype;
      this.groupmember = message.groupmember;
      this.storetime = message.storetime;
      this.extfield = message.extfield;
      this.refmsg = message.refmsg;
      this.contentType = message.contentType;
      this.group = message.group;
    }

    public Builder revision(Long revision) {
      this.revision = revision;
      return this;
    }

    public Builder message(String message) {
      this.message = message;
      return this;
    }

    public Builder timestamp(Long timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    /**
     * 秒
     */
    public Builder msgtype(GroupMsgType msgtype) {
      this.msgtype = msgtype;
      return this;
    }

    public Builder groupmember(GroupMember groupmember) {
      this.groupmember = groupmember;
      return this;
    }

    public Builder storetime(Long storetime) {
      this.storetime = storetime;
      return this;
    }

    /**
     * 客户端要求存储的时间,用于重复送检测
     */
    public Builder extfield(String extfield) {
      this.extfield = extfield;
      return this;
    }

    /**
     * 扩展字段，客户端存储私有信息
     */
    public Builder refmsg(Long refmsg) {
      this.refmsg = refmsg;
      return this;
    }

    /**
     * 引用的消息
     */
    public Builder contentType(MessageContentType contentType) {
      this.contentType = contentType;
      return this;
    }

    public Builder group(GroupInfo group) {
      this.group = group;
      return this;
    }

    @Override
    public GroupMsg build() {
      return new GroupMsg(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
