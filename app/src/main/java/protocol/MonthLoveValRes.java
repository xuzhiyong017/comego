// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REPEATED;

public final class MonthLoveValRes extends Message {

  public static final Integer DEFAULT_MONTH = 0;
  public static final List<MonthLoveVal> DEFAULT_VALS = Collections.emptyList();

  @ProtoField(tag = 1, type = UINT32)
  public final Integer month;

  @ProtoField(tag = 2, label = REPEATED)
  public final List<MonthLoveVal> vals;

  private MonthLoveValRes(Builder builder) {
    this.month = builder.month;
    this.vals = immutableCopyOf(builder.vals);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MonthLoveValRes)) return false;
    MonthLoveValRes o = (MonthLoveValRes) other;
    return equals(month, o.month)
        && equals(vals, o.vals);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = month != null ? month.hashCode() : 0;
      result = result * 37 + (vals != null ? vals.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<MonthLoveValRes> {

    public Integer month;
    public List<MonthLoveVal> vals;

    public Builder() {
    }

    public Builder(MonthLoveValRes message) {
      super(message);
      if (message == null) return;
      this.month = message.month;
      this.vals = copyOf(message.vals);
    }

    public Builder month(Integer month) {
      this.month = month;
      return this;
    }

    public Builder vals(List<MonthLoveVal> vals) {
      this.vals = checkForNulls(vals);
      return this;
    }

    @Override
    public MonthLoveValRes build() {
      return new MonthLoveValRes(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
