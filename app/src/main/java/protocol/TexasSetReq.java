// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * 设置牌和筹码
 */
public final class TexasSetReq extends Message {

  public static final Long DEFAULT_OWNERID = 0L;
  public static final List<Card> DEFAULT_CARDS = Collections.emptyList();
  public static final List<Long> DEFAULT_CHIPS = Collections.emptyList();

  @ProtoField(tag = 1, type = UINT64, label = REQUIRED)
  public final Long ownerId;

  @ProtoField(tag = 2, label = REPEATED)
  public final List<Card> cards;

  @ProtoField(tag = 3, type = UINT64, label = REPEATED)
  public final List<Long> chips;

  private TexasSetReq(Builder builder) {
    this.ownerId = builder.ownerId;
    this.cards = immutableCopyOf(builder.cards);
    this.chips = immutableCopyOf(builder.chips);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TexasSetReq)) return false;
    TexasSetReq o = (TexasSetReq) other;
    return equals(ownerId, o.ownerId)
        && equals(cards, o.cards)
        && equals(chips, o.chips);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = ownerId != null ? ownerId.hashCode() : 0;
      result = result * 37 + (cards != null ? cards.hashCode() : 1);
      result = result * 37 + (chips != null ? chips.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TexasSetReq> {

    public Long ownerId;
    public List<Card> cards;
    public List<Long> chips;

    public Builder() {
    }

    public Builder(TexasSetReq message) {
      super(message);
      if (message == null) return;
      this.ownerId = message.ownerId;
      this.cards = copyOf(message.cards);
      this.chips = copyOf(message.chips);
    }

    public Builder ownerId(Long ownerId) {
      this.ownerId = ownerId;
      return this;
    }

    public Builder cards(List<Card> cards) {
      this.cards = checkForNulls(cards);
      return this;
    }

    public Builder chips(List<Long> chips) {
      this.chips = checkForNulls(chips);
      return this;
    }

    @Override
    public TexasSetReq build() {
      checkRequiredFields();
      return new TexasSetReq(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
