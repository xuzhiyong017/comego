// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class TexasRoom extends Message {

  public static final Long DEFAULT_ROOMID = 0L;
  public static final Integer DEFAULT_PLAYERCOUNT = 0;
  public static final Integer DEFAULT_MAXPLAYERS = 0;
  public static final Long DEFAULT_BLINDBETS = 0L;
  public static final Long DEFAULT_PLAYTIME = 0L;

  @ProtoField(tag = 1, type = UINT64, label = REQUIRED)
  public final Long roomId;

  @ProtoField(tag = 2, type = UINT32, label = REQUIRED)
  public final Integer playerCount;

  /**
   * 当前多少用户
   */
  @ProtoField(tag = 3, type = UINT32, label = REQUIRED)
  public final Integer maxplayers;

  /**
   * 最多玩家
   */
  @ProtoField(tag = 4, type = UINT64, label = REQUIRED)
  public final Long blindbets;

  /**
   * 大盲注
   */
  @ProtoField(tag = 5, type = INT64)
  public final Long playTime;

  private TexasRoom(Builder builder) {
    this.roomId = builder.roomId;
    this.playerCount = builder.playerCount;
    this.maxplayers = builder.maxplayers;
    this.blindbets = builder.blindbets;
    this.playTime = builder.playTime;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TexasRoom)) return false;
    TexasRoom o = (TexasRoom) other;
    return equals(roomId, o.roomId)
        && equals(playerCount, o.playerCount)
        && equals(maxplayers, o.maxplayers)
        && equals(blindbets, o.blindbets)
        && equals(playTime, o.playTime);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = roomId != null ? roomId.hashCode() : 0;
      result = result * 37 + (playerCount != null ? playerCount.hashCode() : 0);
      result = result * 37 + (maxplayers != null ? maxplayers.hashCode() : 0);
      result = result * 37 + (blindbets != null ? blindbets.hashCode() : 0);
      result = result * 37 + (playTime != null ? playTime.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TexasRoom> {

    public Long roomId;
    public Integer playerCount;
    public Integer maxplayers;
    public Long blindbets;
    public Long playTime;

    public Builder() {
    }

    public Builder(TexasRoom message) {
      super(message);
      if (message == null) return;
      this.roomId = message.roomId;
      this.playerCount = message.playerCount;
      this.maxplayers = message.maxplayers;
      this.blindbets = message.blindbets;
      this.playTime = message.playTime;
    }

    public Builder roomId(Long roomId) {
      this.roomId = roomId;
      return this;
    }

    public Builder playerCount(Integer playerCount) {
      this.playerCount = playerCount;
      return this;
    }

    /**
     * 当前多少用户
     */
    public Builder maxplayers(Integer maxplayers) {
      this.maxplayers = maxplayers;
      return this;
    }

    /**
     * 最多玩家
     */
    public Builder blindbets(Long blindbets) {
      this.blindbets = blindbets;
      return this;
    }

    /**
     * 大盲注
     */
    public Builder playTime(Long playTime) {
      this.playTime = playTime;
      return this;
    }

    @Override
    public TexasRoom build() {
      checkRequiredFields();
      return new TexasRoom(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
