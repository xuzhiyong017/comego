// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Label.REPEATED;

public final class TexasQueryRes extends Message {

  public static final List<TexasSeatInfo> DEFAULT_SEATINFO = Collections.emptyList();

  @ProtoField(tag = 1)
  public final TexasGameInfo gameInfo;

  @ProtoField(tag = 2, label = REPEATED)
  public final List<TexasSeatInfo> seatInfo;

  private TexasQueryRes(Builder builder) {
    this.gameInfo = builder.gameInfo;
    this.seatInfo = immutableCopyOf(builder.seatInfo);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TexasQueryRes)) return false;
    TexasQueryRes o = (TexasQueryRes) other;
    return equals(gameInfo, o.gameInfo)
        && equals(seatInfo, o.seatInfo);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = gameInfo != null ? gameInfo.hashCode() : 0;
      result = result * 37 + (seatInfo != null ? seatInfo.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TexasQueryRes> {

    public TexasGameInfo gameInfo;
    public List<TexasSeatInfo> seatInfo;

    public Builder() {
    }

    public Builder(TexasQueryRes message) {
      super(message);
      if (message == null) return;
      this.gameInfo = message.gameInfo;
      this.seatInfo = copyOf(message.seatInfo);
    }

    public Builder gameInfo(TexasGameInfo gameInfo) {
      this.gameInfo = gameInfo;
      return this;
    }

    public Builder seatInfo(List<TexasSeatInfo> seatInfo) {
      this.seatInfo = checkForNulls(seatInfo);
      return this;
    }

    @Override
    public TexasQueryRes build() {
      return new TexasQueryRes(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
