// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.UINT64;

public final class GroupIncrement extends Message {

  public static final Long DEFAULT_REVISION = 0L;
  public static final GroupIncrementType DEFAULT_TYPE = GroupIncrementType.GroupNone;

  @ProtoField(tag = 1, type = UINT64)
  public final Long revision;

  @ProtoField(tag = 2, type = ENUM)
  public final GroupIncrementType type;

  @ProtoField(tag = 3)
  public final GroupInfo group;

  private GroupIncrement(Builder builder) {
    this.revision = builder.revision;
    this.type = builder.type;
    this.group = builder.group;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GroupIncrement)) return false;
    GroupIncrement o = (GroupIncrement) other;
    return equals(revision, o.revision)
        && equals(type, o.type)
        && equals(group, o.group);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = revision != null ? revision.hashCode() : 0;
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (group != null ? group.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GroupIncrement> {

    public Long revision;
    public GroupIncrementType type;
    public GroupInfo group;

    public Builder() {
    }

    public Builder(GroupIncrement message) {
      super(message);
      if (message == null) return;
      this.revision = message.revision;
      this.type = message.type;
      this.group = message.group;
    }

    public Builder revision(Long revision) {
      this.revision = revision;
      return this;
    }

    public Builder type(GroupIncrementType type) {
      this.type = type;
      return this;
    }

    public Builder group(GroupInfo group) {
      this.group = group;
      return this;
    }

    @Override
    public GroupIncrement build() {
      return new GroupIncrement(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
