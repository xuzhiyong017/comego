// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.UINT32;

public final class MessageDestroyLiveRoom extends Message {

  public static final Integer DEFAULT_MEMBERS = 0;
  public static final Long DEFAULT_WINBETS = 0L;

  @ProtoField(tag = 1, type = UINT32)
  public final Integer members;

  @ProtoField(tag = 2, type = INT64)
  public final Long winBets;

  private MessageDestroyLiveRoom(Builder builder) {
    this.members = builder.members;
    this.winBets = builder.winBets;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MessageDestroyLiveRoom)) return false;
    MessageDestroyLiveRoom o = (MessageDestroyLiveRoom) other;
    return equals(members, o.members)
        && equals(winBets, o.winBets);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = members != null ? members.hashCode() : 0;
      result = result * 37 + (winBets != null ? winBets.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<MessageDestroyLiveRoom> {

    public Integer members;
    public Long winBets;

    public Builder() {
    }

    public Builder(MessageDestroyLiveRoom message) {
      super(message);
      if (message == null) return;
      this.members = message.members;
      this.winBets = message.winBets;
    }

    public Builder members(Integer members) {
      this.members = members;
      return this;
    }

    public Builder winBets(Long winBets) {
      this.winBets = winBets;
      return this;
    }

    @Override
    public MessageDestroyLiveRoom build() {
      return new MessageDestroyLiveRoom(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
