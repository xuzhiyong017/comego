// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class Card extends Message {

  public static final Integer DEFAULT_NUMBER = 0;
  public static final CardColor DEFAULT_COLOR = CardColor.CardColor_Diamond;

  @ProtoField(tag = 1, type = UINT32, label = REQUIRED)
  public final Integer number;

  /**
   * 2-14
   */
  @ProtoField(tag = 2, type = ENUM, label = REQUIRED)
  public final CardColor color;

  private Card(Builder builder) {
    this.number = builder.number;
    this.color = builder.color;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Card)) return false;
    Card o = (Card) other;
    return equals(number, o.number)
        && equals(color, o.color);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = number != null ? number.hashCode() : 0;
      result = result * 37 + (color != null ? color.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Card> {

    public Integer number;
    public CardColor color;

    public Builder() {
    }

    public Builder(Card message) {
      super(message);
      if (message == null) return;
      this.number = message.number;
      this.color = message.color;
    }

    public Builder number(Integer number) {
      this.number = number;
      return this;
    }

    /**
     * 2-14
     */
    public Builder color(CardColor color) {
      this.color = color;
      return this;
    }

    @Override
    public Card build() {
      checkRequiredFields();
      return new Card(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
