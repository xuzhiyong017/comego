// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT64;

/**
 * 举报违规消息
 */
public final class ReportViolatorReq extends Message {

  public static final ViolatorType DEFAULT_TYPE = ViolatorType.ViolatorTypeUser;
  public static final ViolatorReason DEFAULT_REASON = ViolatorReason.ViolatorReasonAdvertisement;
  public static final Long DEFAULT_UID = 0L;
  public static final Long DEFAULT_GID = 0L;
  public static final String DEFAULT_CONTEXT = "";
  public static final String DEFAULT_URL = "";
  public static final String DEFAULT_VIDEOID = "";

  @ProtoField(tag = 1, type = ENUM)
  public final ViolatorType type;

  @ProtoField(tag = 2, type = ENUM)
  public final ViolatorReason reason;

  @ProtoField(tag = 3, type = UINT64)
  public final Long uid;

  @ProtoField(tag = 4, type = UINT64)
  public final Long gid;

  @ProtoField(tag = 5, type = STRING)
  public final String context;

  @ProtoField(tag = 6, type = STRING)
  public final String url;

  /**
   * 截图
   */
  @ProtoField(tag = 7, type = STRING)
  public final String videoId;

  private ReportViolatorReq(Builder builder) {
    this.type = builder.type;
    this.reason = builder.reason;
    this.uid = builder.uid;
    this.gid = builder.gid;
    this.context = builder.context;
    this.url = builder.url;
    this.videoId = builder.videoId;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ReportViolatorReq)) return false;
    ReportViolatorReq o = (ReportViolatorReq) other;
    return equals(type, o.type)
        && equals(reason, o.reason)
        && equals(uid, o.uid)
        && equals(gid, o.gid)
        && equals(context, o.context)
        && equals(url, o.url)
        && equals(videoId, o.videoId);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = type != null ? type.hashCode() : 0;
      result = result * 37 + (reason != null ? reason.hashCode() : 0);
      result = result * 37 + (uid != null ? uid.hashCode() : 0);
      result = result * 37 + (gid != null ? gid.hashCode() : 0);
      result = result * 37 + (context != null ? context.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (videoId != null ? videoId.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ReportViolatorReq> {

    public ViolatorType type;
    public ViolatorReason reason;
    public Long uid;
    public Long gid;
    public String context;
    public String url;
    public String videoId;

    public Builder() {
    }

    public Builder(ReportViolatorReq message) {
      super(message);
      if (message == null) return;
      this.type = message.type;
      this.reason = message.reason;
      this.uid = message.uid;
      this.gid = message.gid;
      this.context = message.context;
      this.url = message.url;
      this.videoId = message.videoId;
    }

    public Builder type(ViolatorType type) {
      this.type = type;
      return this;
    }

    public Builder reason(ViolatorReason reason) {
      this.reason = reason;
      return this;
    }

    public Builder uid(Long uid) {
      this.uid = uid;
      return this;
    }

    public Builder gid(Long gid) {
      this.gid = gid;
      return this;
    }

    public Builder context(String context) {
      this.context = context;
      return this;
    }

    public Builder url(String url) {
      this.url = url;
      return this;
    }

    /**
     * 截图
     */
    public Builder videoId(String videoId) {
      this.videoId = videoId;
      return this;
    }

    @Override
    public ReportViolatorReq build() {
      return new ReportViolatorReq(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
