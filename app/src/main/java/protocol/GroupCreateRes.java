// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class GroupCreateRes extends Message {

  public static final String DEFAULT_LIVETOKEN = "";
  public static final List<GroupBet> DEFAULT_BETS = Collections.emptyList();

  @ProtoField(tag = 1)
  public final GroupInfo groupInfo;

  @ProtoField(tag = 2, type = STRING)
  public final String liveToken;

  @ProtoField(tag = 3, label = REPEATED)
  public final List<GroupBet> bets;

  private GroupCreateRes(Builder builder) {
    this.groupInfo = builder.groupInfo;
    this.liveToken = builder.liveToken;
    this.bets = immutableCopyOf(builder.bets);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GroupCreateRes)) return false;
    GroupCreateRes o = (GroupCreateRes) other;
    return equals(groupInfo, o.groupInfo)
        && equals(liveToken, o.liveToken)
        && equals(bets, o.bets);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = groupInfo != null ? groupInfo.hashCode() : 0;
      result = result * 37 + (liveToken != null ? liveToken.hashCode() : 0);
      result = result * 37 + (bets != null ? bets.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GroupCreateRes> {

    public GroupInfo groupInfo;
    public String liveToken;
    public List<GroupBet> bets;

    public Builder() {
    }

    public Builder(GroupCreateRes message) {
      super(message);
      if (message == null) return;
      this.groupInfo = message.groupInfo;
      this.liveToken = message.liveToken;
      this.bets = copyOf(message.bets);
    }

    public Builder groupInfo(GroupInfo groupInfo) {
      this.groupInfo = groupInfo;
      return this;
    }

    public Builder liveToken(String liveToken) {
      this.liveToken = liveToken;
      return this;
    }

    public Builder bets(List<GroupBet> bets) {
      this.bets = checkForNulls(bets);
      return this;
    }

    @Override
    public GroupCreateRes build() {
      return new GroupCreateRes(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
