// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REPEATED;

public final class MessagePub extends Message {

  public static final String DEFAULT_TITLE = "";
  public static final String DEFAULT_URL = "";
  public static final String DEFAULT_SUMMARY = "";
  public static final String DEFAULT_PREFIX = "";
  public static final List<String> DEFAULT_IMAGES = Collections.emptyList();
  public static final String DEFAULT_OP = "";
  public static final Long DEFAULT_STARTTIME = 0L;
  public static final Long DEFAULT_STOPTIME = 0L;

  @ProtoField(tag = 1, type = STRING)
  public final String title;

  @ProtoField(tag = 2, type = STRING)
  public final String url;

  @ProtoField(tag = 3, type = STRING)
  public final String summary;

  @ProtoField(tag = 4, type = STRING)
  public final String prefix;

  @ProtoField(tag = 5, type = STRING, label = REPEATED)
  public final List<String> images;

  @ProtoField(tag = 6, type = STRING)
  public final String op;

  @ProtoField(tag = 7, type = INT64)
  public final Long starttime;

  @ProtoField(tag = 8, type = INT64)
  public final Long stoptime;

  private MessagePub(Builder builder) {
    this.title = builder.title;
    this.url = builder.url;
    this.summary = builder.summary;
    this.prefix = builder.prefix;
    this.images = immutableCopyOf(builder.images);
    this.op = builder.op;
    this.starttime = builder.starttime;
    this.stoptime = builder.stoptime;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MessagePub)) return false;
    MessagePub o = (MessagePub) other;
    return equals(title, o.title)
        && equals(url, o.url)
        && equals(summary, o.summary)
        && equals(prefix, o.prefix)
        && equals(images, o.images)
        && equals(op, o.op)
        && equals(starttime, o.starttime)
        && equals(stoptime, o.stoptime);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = title != null ? title.hashCode() : 0;
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (summary != null ? summary.hashCode() : 0);
      result = result * 37 + (prefix != null ? prefix.hashCode() : 0);
      result = result * 37 + (images != null ? images.hashCode() : 1);
      result = result * 37 + (op != null ? op.hashCode() : 0);
      result = result * 37 + (starttime != null ? starttime.hashCode() : 0);
      result = result * 37 + (stoptime != null ? stoptime.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<MessagePub> {

    public String title;
    public String url;
    public String summary;
    public String prefix;
    public List<String> images;
    public String op;
    public Long starttime;
    public Long stoptime;

    public Builder() {
    }

    public Builder(MessagePub message) {
      super(message);
      if (message == null) return;
      this.title = message.title;
      this.url = message.url;
      this.summary = message.summary;
      this.prefix = message.prefix;
      this.images = copyOf(message.images);
      this.op = message.op;
      this.starttime = message.starttime;
      this.stoptime = message.stoptime;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder url(String url) {
      this.url = url;
      return this;
    }

    public Builder summary(String summary) {
      this.summary = summary;
      return this;
    }

    public Builder prefix(String prefix) {
      this.prefix = prefix;
      return this;
    }

    public Builder images(List<String> images) {
      this.images = checkForNulls(images);
      return this;
    }

    public Builder op(String op) {
      this.op = op;
      return this;
    }

    public Builder starttime(Long starttime) {
      this.starttime = starttime;
      return this;
    }

    public Builder stoptime(Long stoptime) {
      this.stoptime = stoptime;
      return this;
    }

    @Override
    public MessagePub build() {
      return new MessagePub(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
