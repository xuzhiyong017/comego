// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class TexasSeatInfo extends Message {

  public static final Long DEFAULT_UID = 0L;
  public static final Integer DEFAULT_SEATID = 0;
  public static final TexasSeatState DEFAULT_STATE = TexasSeatState.TexasPlayer_Ready;
  public static final Long DEFAULT_CHIPS = 0L;
  public static final Long DEFAULT_BET = 0L;
  public static final Long DEFAULT_LEFTTIME = 0L;
  public static final List<TexasSelectArgs> DEFAULT_SEL = Collections.emptyList();
  public static final Integer DEFAULT_RANK = 0;

  @ProtoField(tag = 1, type = UINT64, label = REQUIRED)
  public final Long uid;

  @ProtoField(tag = 2, type = UINT32, label = REQUIRED)
  public final Integer seatId;

  @ProtoField(tag = 3, type = ENUM)
  public final TexasSeatState state;

  @ProtoField(tag = 4, type = UINT64)
  public final Long chips;

  /**
   * 剩余的金币
   */
  @ProtoField(tag = 5, type = UINT64)
  public final Long bet;

  /**
   * 已下注的金币
   */
  @ProtoField(tag = 6, type = UINT64)
  public final Long leftTime;

  /**
   * 操作剩余时间
   */
  @ProtoField(tag = 7, label = REPEATED)
  public final List<TexasSelectArgs> sel;

  @ProtoField(tag = 8, type = UINT32)
  public final Integer rank;

  private TexasSeatInfo(Builder builder) {
    this.uid = builder.uid;
    this.seatId = builder.seatId;
    this.state = builder.state;
    this.chips = builder.chips;
    this.bet = builder.bet;
    this.leftTime = builder.leftTime;
    this.sel = immutableCopyOf(builder.sel);
    this.rank = builder.rank;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TexasSeatInfo)) return false;
    TexasSeatInfo o = (TexasSeatInfo) other;
    return equals(uid, o.uid)
        && equals(seatId, o.seatId)
        && equals(state, o.state)
        && equals(chips, o.chips)
        && equals(bet, o.bet)
        && equals(leftTime, o.leftTime)
        && equals(sel, o.sel)
        && equals(rank, o.rank);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = uid != null ? uid.hashCode() : 0;
      result = result * 37 + (seatId != null ? seatId.hashCode() : 0);
      result = result * 37 + (state != null ? state.hashCode() : 0);
      result = result * 37 + (chips != null ? chips.hashCode() : 0);
      result = result * 37 + (bet != null ? bet.hashCode() : 0);
      result = result * 37 + (leftTime != null ? leftTime.hashCode() : 0);
      result = result * 37 + (sel != null ? sel.hashCode() : 1);
      result = result * 37 + (rank != null ? rank.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TexasSeatInfo> {

    public Long uid;
    public Integer seatId;
    public TexasSeatState state;
    public Long chips;
    public Long bet;
    public Long leftTime;
    public List<TexasSelectArgs> sel;
    public Integer rank;

    public Builder() {
    }

    public Builder(TexasSeatInfo message) {
      super(message);
      if (message == null) return;
      this.uid = message.uid;
      this.seatId = message.seatId;
      this.state = message.state;
      this.chips = message.chips;
      this.bet = message.bet;
      this.leftTime = message.leftTime;
      this.sel = copyOf(message.sel);
      this.rank = message.rank;
    }

    public Builder uid(Long uid) {
      this.uid = uid;
      return this;
    }

    public Builder seatId(Integer seatId) {
      this.seatId = seatId;
      return this;
    }

    public Builder state(TexasSeatState state) {
      this.state = state;
      return this;
    }

    public Builder chips(Long chips) {
      this.chips = chips;
      return this;
    }

    /**
     * 剩余的金币
     */
    public Builder bet(Long bet) {
      this.bet = bet;
      return this;
    }

    /**
     * 已下注的金币
     */
    public Builder leftTime(Long leftTime) {
      this.leftTime = leftTime;
      return this;
    }

    /**
     * 操作剩余时间
     */
    public Builder sel(List<TexasSelectArgs> sel) {
      this.sel = checkForNulls(sel);
      return this;
    }

    public Builder rank(Integer rank) {
      this.rank = rank;
      return this;
    }

    @Override
    public TexasSeatInfo build() {
      checkRequiredFields();
      return new TexasSeatInfo(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
