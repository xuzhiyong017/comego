// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class GiftDonateReq extends Message {

  public static final Long DEFAULT_DONEEID = 0L;
  public static final Integer DEFAULT_GIFTID = 0;
  public static final Integer DEFAULT_NUM = 1;
  public static final Long DEFAULT_GID = 0L;
  public static final String DEFAULT_COMBOID = "";
  public static final List<DrawPoint> DEFAULT_POINTS = Collections.emptyList();
  public static final Integer DEFAULT_TOFIXEDNUM = 0;

  @ProtoField(tag = 1, type = UINT64, label = REQUIRED)
  public final Long doneeId;

  /**
   * 收礼人
   */
  @ProtoField(tag = 2, type = UINT32, label = REQUIRED)
  public final Integer giftId;

  @ProtoField(tag = 3, type = UINT32)
  public final Integer num;

  @ProtoField(tag = 4, type = UINT64)
  public final Long gid;

  /**
   * 在哪个房间送
   */
  @ProtoField(tag = 5, type = STRING)
  public final String comboId;

  /**
   * 连送ID，格式：UID-TimeUnix
   */
  @ProtoField(tag = 6, label = REPEATED)
  public final List<DrawPoint> points;

  /**
   * 画图礼物的点
   */
  @ProtoField(tag = 7, type = UINT32)
  public final Integer toFixedNum;

  private GiftDonateReq(Builder builder) {
    this.doneeId = builder.doneeId;
    this.giftId = builder.giftId;
    this.num = builder.num;
    this.gid = builder.gid;
    this.comboId = builder.comboId;
    this.points = immutableCopyOf(builder.points);
    this.toFixedNum = builder.toFixedNum;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GiftDonateReq)) return false;
    GiftDonateReq o = (GiftDonateReq) other;
    return equals(doneeId, o.doneeId)
        && equals(giftId, o.giftId)
        && equals(num, o.num)
        && equals(gid, o.gid)
        && equals(comboId, o.comboId)
        && equals(points, o.points)
        && equals(toFixedNum, o.toFixedNum);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = doneeId != null ? doneeId.hashCode() : 0;
      result = result * 37 + (giftId != null ? giftId.hashCode() : 0);
      result = result * 37 + (num != null ? num.hashCode() : 0);
      result = result * 37 + (gid != null ? gid.hashCode() : 0);
      result = result * 37 + (comboId != null ? comboId.hashCode() : 0);
      result = result * 37 + (points != null ? points.hashCode() : 1);
      result = result * 37 + (toFixedNum != null ? toFixedNum.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GiftDonateReq> {

    public Long doneeId;
    public Integer giftId;
    public Integer num;
    public Long gid;
    public String comboId;
    public List<DrawPoint> points;
    public Integer toFixedNum;

    public Builder() {
    }

    public Builder(GiftDonateReq message) {
      super(message);
      if (message == null) return;
      this.doneeId = message.doneeId;
      this.giftId = message.giftId;
      this.num = message.num;
      this.gid = message.gid;
      this.comboId = message.comboId;
      this.points = copyOf(message.points);
      this.toFixedNum = message.toFixedNum;
    }

    public Builder doneeId(Long doneeId) {
      this.doneeId = doneeId;
      return this;
    }

    /**
     * 收礼人
     */
    public Builder giftId(Integer giftId) {
      this.giftId = giftId;
      return this;
    }

    public Builder num(Integer num) {
      this.num = num;
      return this;
    }

    public Builder gid(Long gid) {
      this.gid = gid;
      return this;
    }

    /**
     * 在哪个房间送
     */
    public Builder comboId(String comboId) {
      this.comboId = comboId;
      return this;
    }

    /**
     * 连送ID，格式：UID-TimeUnix
     */
    public Builder points(List<DrawPoint> points) {
      this.points = checkForNulls(points);
      return this;
    }

    /**
     * 画图礼物的点
     */
    public Builder toFixedNum(Integer toFixedNum) {
      this.toFixedNum = toFixedNum;
      return this;
    }

    @Override
    public GiftDonateReq build() {
      checkRequiredFields();
      return new GiftDonateReq(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
