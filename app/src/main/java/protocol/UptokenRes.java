// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REPEATED;

public final class UptokenRes extends Message {

  public static final List<Uptoken> DEFAULT_TOKENS = Collections.emptyList();
  public static final String DEFAULT_BS2TOKEN = "";
  public static final Integer DEFAULT_APPKEY = 0;
  public static final String DEFAULT_SECRET = "";

  @ProtoField(tag = 1, label = REPEATED)
  public final List<Uptoken> tokens;

  @ProtoField(tag = 2, type = STRING)
  public final String bs2token;

  @ProtoField(tag = 3, type = UINT32)
  public final Integer appkey;

  @ProtoField(tag = 4, type = STRING)
  public final String secret;

  private UptokenRes(Builder builder) {
    this.tokens = immutableCopyOf(builder.tokens);
    this.bs2token = builder.bs2token;
    this.appkey = builder.appkey;
    this.secret = builder.secret;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UptokenRes)) return false;
    UptokenRes o = (UptokenRes) other;
    return equals(tokens, o.tokens)
        && equals(bs2token, o.bs2token)
        && equals(appkey, o.appkey)
        && equals(secret, o.secret);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = tokens != null ? tokens.hashCode() : 1;
      result = result * 37 + (bs2token != null ? bs2token.hashCode() : 0);
      result = result * 37 + (appkey != null ? appkey.hashCode() : 0);
      result = result * 37 + (secret != null ? secret.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<UptokenRes> {

    public List<Uptoken> tokens;
    public String bs2token;
    public Integer appkey;
    public String secret;

    public Builder() {
    }

    public Builder(UptokenRes message) {
      super(message);
      if (message == null) return;
      this.tokens = copyOf(message.tokens);
      this.bs2token = message.bs2token;
      this.appkey = message.appkey;
      this.secret = message.secret;
    }

    public Builder tokens(List<Uptoken> tokens) {
      this.tokens = checkForNulls(tokens);
      return this;
    }

    public Builder bs2token(String bs2token) {
      this.bs2token = bs2token;
      return this;
    }

    public Builder appkey(Integer appkey) {
      this.appkey = appkey;
      return this;
    }

    public Builder secret(String secret) {
      this.secret = secret;
      return this;
    }

    @Override
    public UptokenRes build() {
      return new UptokenRes(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
