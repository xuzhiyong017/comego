// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;

public final class GroupMsgList extends Message {

  public static final Long DEFAULT_REVISION = 0L;
  public static final Long DEFAULT_GID = 0L;
  public static final List<GroupMsg> DEFAULT_MSGS = Collections.emptyList();
  public static final Long DEFAULT_APPREVISION = 0L;
  public static final Long DEFAULT_REVREAD = 0L;
  public static final Integer DEFAULT_FETCHS = 0;
  public static final Integer DEFAULT_TOPN = 0;

  @ProtoField(tag = 1, type = UINT64)
  public final Long revision;

  /**
   * 最新的版本
   */
  @ProtoField(tag = 2, type = UINT64)
  public final Long gid;

  @ProtoField(tag = 3, label = REPEATED)
  public final List<GroupMsg> msgs;

  @ProtoField(tag = 5, type = UINT64)
  public final Long apprevision;

  /**
   * 最新的评论版本号
   */
  @ProtoField(tag = 7, type = UINT64)
  public final Long revread;

  /**
   * 已读版本号
   */
  @ProtoField(tag = 8, type = UINT32)
  public final Integer fetchs;

  /**
   * 这个参数如果不为0，从指定版本读取fetchs个结果返回
   */
  @ProtoField(tag = 9, type = UINT32)
  public final Integer topn;

  private GroupMsgList(Builder builder) {
    this.revision = builder.revision;
    this.gid = builder.gid;
    this.msgs = immutableCopyOf(builder.msgs);
    this.apprevision = builder.apprevision;
    this.revread = builder.revread;
    this.fetchs = builder.fetchs;
    this.topn = builder.topn;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GroupMsgList)) return false;
    GroupMsgList o = (GroupMsgList) other;
    return equals(revision, o.revision)
        && equals(gid, o.gid)
        && equals(msgs, o.msgs)
        && equals(apprevision, o.apprevision)
        && equals(revread, o.revread)
        && equals(fetchs, o.fetchs)
        && equals(topn, o.topn);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = revision != null ? revision.hashCode() : 0;
      result = result * 37 + (gid != null ? gid.hashCode() : 0);
      result = result * 37 + (msgs != null ? msgs.hashCode() : 1);
      result = result * 37 + (apprevision != null ? apprevision.hashCode() : 0);
      result = result * 37 + (revread != null ? revread.hashCode() : 0);
      result = result * 37 + (fetchs != null ? fetchs.hashCode() : 0);
      result = result * 37 + (topn != null ? topn.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GroupMsgList> {

    public Long revision;
    public Long gid;
    public List<GroupMsg> msgs;
    public Long apprevision;
    public Long revread;
    public Integer fetchs;
    public Integer topn;

    public Builder() {
    }

    public Builder(GroupMsgList message) {
      super(message);
      if (message == null) return;
      this.revision = message.revision;
      this.gid = message.gid;
      this.msgs = copyOf(message.msgs);
      this.apprevision = message.apprevision;
      this.revread = message.revread;
      this.fetchs = message.fetchs;
      this.topn = message.topn;
    }

    public Builder revision(Long revision) {
      this.revision = revision;
      return this;
    }

    /**
     * 最新的版本
     */
    public Builder gid(Long gid) {
      this.gid = gid;
      return this;
    }

    public Builder msgs(List<GroupMsg> msgs) {
      this.msgs = checkForNulls(msgs);
      return this;
    }

    public Builder apprevision(Long apprevision) {
      this.apprevision = apprevision;
      return this;
    }

    /**
     * 最新的评论版本号
     */
    public Builder revread(Long revread) {
      this.revread = revread;
      return this;
    }

    /**
     * 已读版本号
     */
    public Builder fetchs(Integer fetchs) {
      this.fetchs = fetchs;
      return this;
    }

    /**
     * 这个参数如果不为0，从指定版本读取fetchs个结果返回
     */
    public Builder topn(Integer topn) {
      this.topn = topn;
      return this;
    }

    @Override
    public GroupMsgList build() {
      return new GroupMsgList(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
