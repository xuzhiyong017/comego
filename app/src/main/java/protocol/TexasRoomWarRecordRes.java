// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class TexasRoomWarRecordRes extends Message {

  public static final Integer DEFAULT_INDEX = 0;
  public static final Integer DEFAULT_FETCHS = 0;
  public static final Long DEFAULT_ROOMID = 0L;
  public static final Long DEFAULT_USERNUM = 0L;
  public static final List<TexasRoomWarRecord> DEFAULT_RECORDS = Collections.emptyList();

  @ProtoField(tag = 1, type = UINT32)
  public final Integer index;

  @ProtoField(tag = 2, type = UINT32)
  public final Integer fetchs;

  @ProtoField(tag = 3, type = UINT64, label = REQUIRED)
  public final Long roomId;

  @ProtoField(tag = 4, type = UINT64, label = REQUIRED)
  public final Long userNum;

  @ProtoField(tag = 5, label = REPEATED)
  public final List<TexasRoomWarRecord> records;

  private TexasRoomWarRecordRes(Builder builder) {
    this.index = builder.index;
    this.fetchs = builder.fetchs;
    this.roomId = builder.roomId;
    this.userNum = builder.userNum;
    this.records = immutableCopyOf(builder.records);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TexasRoomWarRecordRes)) return false;
    TexasRoomWarRecordRes o = (TexasRoomWarRecordRes) other;
    return equals(index, o.index)
        && equals(fetchs, o.fetchs)
        && equals(roomId, o.roomId)
        && equals(userNum, o.userNum)
        && equals(records, o.records);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = index != null ? index.hashCode() : 0;
      result = result * 37 + (fetchs != null ? fetchs.hashCode() : 0);
      result = result * 37 + (roomId != null ? roomId.hashCode() : 0);
      result = result * 37 + (userNum != null ? userNum.hashCode() : 0);
      result = result * 37 + (records != null ? records.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TexasRoomWarRecordRes> {

    public Integer index;
    public Integer fetchs;
    public Long roomId;
    public Long userNum;
    public List<TexasRoomWarRecord> records;

    public Builder() {
    }

    public Builder(TexasRoomWarRecordRes message) {
      super(message);
      if (message == null) return;
      this.index = message.index;
      this.fetchs = message.fetchs;
      this.roomId = message.roomId;
      this.userNum = message.userNum;
      this.records = copyOf(message.records);
    }

    public Builder index(Integer index) {
      this.index = index;
      return this;
    }

    public Builder fetchs(Integer fetchs) {
      this.fetchs = fetchs;
      return this;
    }

    public Builder roomId(Long roomId) {
      this.roomId = roomId;
      return this;
    }

    public Builder userNum(Long userNum) {
      this.userNum = userNum;
      return this;
    }

    public Builder records(List<TexasRoomWarRecord> records) {
      this.records = checkForNulls(records);
      return this;
    }

    @Override
    public TexasRoomWarRecordRes build() {
      checkRequiredFields();
      return new TexasRoomWarRecordRes(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
