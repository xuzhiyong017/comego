// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.FLOAT;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REPEATED;

public final class TexasUserStatRes extends Message {

  public static final Long DEFAULT_UID = 0L;
  public static final Integer DEFAULT_TOTALROUNDS = 0;
  public static final Float DEFAULT_WINRATE = 0F;
  public static final Float DEFAULT_ACTIVERATE = 0F;
  public static final Float DEFAULT_SHOWHANDRATE = 0F;
  public static final CardType DEFAULT_MAXCARDTYPE = CardType.Level_High;
  public static final List<Card> DEFAULT_MAXCARDS = Collections.emptyList();

  @ProtoField(tag = 1, type = UINT64)
  public final Long uid;

  @ProtoField(tag = 2, type = UINT32)
  public final Integer totalRounds;

  /**
   * 牌局数
   */
  @ProtoField(tag = 3, type = FLOAT)
  public final Float winRate;

  /**
   * 胜率
   */
  @ProtoField(tag = 4, type = FLOAT)
  public final Float activeRate;

  /**
   * 入局率
   */
  @ProtoField(tag = 5, type = FLOAT)
  public final Float showHandRate;

  /**
   * 摊牌率
   */
  @ProtoField(tag = 6, type = ENUM)
  public final CardType maxCardType;

  /**
   * 最大牌型
   */
  @ProtoField(tag = 7, label = REPEATED)
  public final List<Card> maxCards;

  private TexasUserStatRes(Builder builder) {
    this.uid = builder.uid;
    this.totalRounds = builder.totalRounds;
    this.winRate = builder.winRate;
    this.activeRate = builder.activeRate;
    this.showHandRate = builder.showHandRate;
    this.maxCardType = builder.maxCardType;
    this.maxCards = immutableCopyOf(builder.maxCards);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof TexasUserStatRes)) return false;
    TexasUserStatRes o = (TexasUserStatRes) other;
    return equals(uid, o.uid)
        && equals(totalRounds, o.totalRounds)
        && equals(winRate, o.winRate)
        && equals(activeRate, o.activeRate)
        && equals(showHandRate, o.showHandRate)
        && equals(maxCardType, o.maxCardType)
        && equals(maxCards, o.maxCards);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = uid != null ? uid.hashCode() : 0;
      result = result * 37 + (totalRounds != null ? totalRounds.hashCode() : 0);
      result = result * 37 + (winRate != null ? winRate.hashCode() : 0);
      result = result * 37 + (activeRate != null ? activeRate.hashCode() : 0);
      result = result * 37 + (showHandRate != null ? showHandRate.hashCode() : 0);
      result = result * 37 + (maxCardType != null ? maxCardType.hashCode() : 0);
      result = result * 37 + (maxCards != null ? maxCards.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<TexasUserStatRes> {

    public Long uid;
    public Integer totalRounds;
    public Float winRate;
    public Float activeRate;
    public Float showHandRate;
    public CardType maxCardType;
    public List<Card> maxCards;

    public Builder() {
    }

    public Builder(TexasUserStatRes message) {
      super(message);
      if (message == null) return;
      this.uid = message.uid;
      this.totalRounds = message.totalRounds;
      this.winRate = message.winRate;
      this.activeRate = message.activeRate;
      this.showHandRate = message.showHandRate;
      this.maxCardType = message.maxCardType;
      this.maxCards = copyOf(message.maxCards);
    }

    public Builder uid(Long uid) {
      this.uid = uid;
      return this;
    }

    public Builder totalRounds(Integer totalRounds) {
      this.totalRounds = totalRounds;
      return this;
    }

    /**
     * 牌局数
     */
    public Builder winRate(Float winRate) {
      this.winRate = winRate;
      return this;
    }

    /**
     * 胜率
     */
    public Builder activeRate(Float activeRate) {
      this.activeRate = activeRate;
      return this;
    }

    /**
     * 入局率
     */
    public Builder showHandRate(Float showHandRate) {
      this.showHandRate = showHandRate;
      return this;
    }

    /**
     * 摊牌率
     */
    public Builder maxCardType(CardType maxCardType) {
      this.maxCardType = maxCardType;
      return this;
    }

    /**
     * 最大牌型
     */
    public Builder maxCards(List<Card> maxCards) {
      this.maxCards = checkForNulls(maxCards);
      return this;
    }

    @Override
    public TexasUserStatRes build() {
      return new TexasUserStatRes(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
