// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REPEATED;

public final class MessageBody extends Message {

  public static final Integer DEFAULT_CONTENTTYPE = 0;
  public static final String DEFAULT_TXT = "";
  public static final List<MessagePub> DEFAULT_PUB = Collections.emptyList();
  public static final String DEFAULT_HTML = "";
  public static final List<MessagePub> DEFAULT_AD = Collections.emptyList();

  @ProtoField(tag = 1, type = UINT32)
  public final Integer contentType;

  @ProtoField(tag = 2, type = STRING)
  public final String txt;

  @ProtoField(tag = 3)
  public final MessageImage img;

  @ProtoField(tag = 4)
  public final MessageVoice voice;

  @ProtoField(tag = 5)
  public final MessageVideo video;

  @ProtoField(tag = 6, label = REPEATED)
  public final List<MessagePub> pub;

  /**
   * 系统通知
   */
  @ProtoField(tag = 7, type = STRING)
  public final String html;

  @ProtoField(tag = 8, label = REPEATED)
  public final List<MessagePub> ad;

  /**
   * 广告
   */
  @ProtoField(tag = 9)
  public final MessageDestroyLiveRoom destroyLiveRoom;

  /**
   * 关闭直播间
   */
  @ProtoField(tag = 35)
  public final MessageEvent event;

  private MessageBody(Builder builder) {
    this.contentType = builder.contentType;
    this.txt = builder.txt;
    this.img = builder.img;
    this.voice = builder.voice;
    this.video = builder.video;
    this.pub = immutableCopyOf(builder.pub);
    this.html = builder.html;
    this.ad = immutableCopyOf(builder.ad);
    this.destroyLiveRoom = builder.destroyLiveRoom;
    this.event = builder.event;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof MessageBody)) return false;
    MessageBody o = (MessageBody) other;
    return equals(contentType, o.contentType)
        && equals(txt, o.txt)
        && equals(img, o.img)
        && equals(voice, o.voice)
        && equals(video, o.video)
        && equals(pub, o.pub)
        && equals(html, o.html)
        && equals(ad, o.ad)
        && equals(destroyLiveRoom, o.destroyLiveRoom)
        && equals(event, o.event);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = contentType != null ? contentType.hashCode() : 0;
      result = result * 37 + (txt != null ? txt.hashCode() : 0);
      result = result * 37 + (img != null ? img.hashCode() : 0);
      result = result * 37 + (voice != null ? voice.hashCode() : 0);
      result = result * 37 + (video != null ? video.hashCode() : 0);
      result = result * 37 + (pub != null ? pub.hashCode() : 1);
      result = result * 37 + (html != null ? html.hashCode() : 0);
      result = result * 37 + (ad != null ? ad.hashCode() : 1);
      result = result * 37 + (destroyLiveRoom != null ? destroyLiveRoom.hashCode() : 0);
      result = result * 37 + (event != null ? event.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<MessageBody> {

    public Integer contentType;
    public String txt;
    public MessageImage img;
    public MessageVoice voice;
    public MessageVideo video;
    public List<MessagePub> pub;
    public String html;
    public List<MessagePub> ad;
    public MessageDestroyLiveRoom destroyLiveRoom;
    public MessageEvent event;

    public Builder() {
    }

    public Builder(MessageBody message) {
      super(message);
      if (message == null) return;
      this.contentType = message.contentType;
      this.txt = message.txt;
      this.img = message.img;
      this.voice = message.voice;
      this.video = message.video;
      this.pub = copyOf(message.pub);
      this.html = message.html;
      this.ad = copyOf(message.ad);
      this.destroyLiveRoom = message.destroyLiveRoom;
      this.event = message.event;
    }

    public Builder contentType(Integer contentType) {
      this.contentType = contentType;
      return this;
    }

    public Builder txt(String txt) {
      this.txt = txt;
      return this;
    }

    public Builder img(MessageImage img) {
      this.img = img;
      return this;
    }

    public Builder voice(MessageVoice voice) {
      this.voice = voice;
      return this;
    }

    public Builder video(MessageVideo video) {
      this.video = video;
      return this;
    }

    public Builder pub(List<MessagePub> pub) {
      this.pub = checkForNulls(pub);
      return this;
    }

    /**
     * 系统通知
     */
    public Builder html(String html) {
      this.html = html;
      return this;
    }

    public Builder ad(List<MessagePub> ad) {
      this.ad = checkForNulls(ad);
      return this;
    }

    /**
     * 广告
     */
    public Builder destroyLiveRoom(MessageDestroyLiveRoom destroyLiveRoom) {
      this.destroyLiveRoom = destroyLiveRoom;
      return this;
    }

    /**
     * 关闭直播间
     */
    public Builder event(MessageEvent event) {
      this.event = event;
      return this;
    }

    @Override
    public MessageBody build() {
      return new MessageBody(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
