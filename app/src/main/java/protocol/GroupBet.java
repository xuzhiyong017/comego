// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class GroupBet extends Message {

  public static final Integer DEFAULT_BETID = 0;
  public static final Long DEFAULT_SBLIND = 0L;
  public static final Long DEFAULT_MINCARRY = 0L;
  public static final Long DEFAULT_MAXCARRY = 0L;

  @ProtoField(tag = 1, type = UINT32, label = REQUIRED)
  public final Integer betId;

  @ProtoField(tag = 2, type = UINT64, label = REQUIRED)
  public final Long sBlind;

  @ProtoField(tag = 3, type = UINT64, label = REQUIRED)
  public final Long minCarry;

  @ProtoField(tag = 4, type = UINT64, label = REQUIRED)
  public final Long maxCarry;

  private GroupBet(Builder builder) {
    this.betId = builder.betId;
    this.sBlind = builder.sBlind;
    this.minCarry = builder.minCarry;
    this.maxCarry = builder.maxCarry;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GroupBet)) return false;
    GroupBet o = (GroupBet) other;
    return equals(betId, o.betId)
        && equals(sBlind, o.sBlind)
        && equals(minCarry, o.minCarry)
        && equals(maxCarry, o.maxCarry);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = betId != null ? betId.hashCode() : 0;
      result = result * 37 + (sBlind != null ? sBlind.hashCode() : 0);
      result = result * 37 + (minCarry != null ? minCarry.hashCode() : 0);
      result = result * 37 + (maxCarry != null ? maxCarry.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GroupBet> {

    public Integer betId;
    public Long sBlind;
    public Long minCarry;
    public Long maxCarry;

    public Builder() {
    }

    public Builder(GroupBet message) {
      super(message);
      if (message == null) return;
      this.betId = message.betId;
      this.sBlind = message.sBlind;
      this.minCarry = message.minCarry;
      this.maxCarry = message.maxCarry;
    }

    public Builder betId(Integer betId) {
      this.betId = betId;
      return this;
    }

    public Builder sBlind(Long sBlind) {
      this.sBlind = sBlind;
      return this;
    }

    public Builder minCarry(Long minCarry) {
      this.minCarry = minCarry;
      return this;
    }

    public Builder maxCarry(Long maxCarry) {
      this.maxCarry = maxCarry;
      return this;
    }

    @Override
    public GroupBet build() {
      checkRequiredFields();
      return new GroupBet(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
