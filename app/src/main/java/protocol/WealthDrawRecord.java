// Code generated by Wire protocol buffer compiler, do not edit.
// Any Question Please Contact: jerryzhou@outlook.com
package protocol;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.FLOAT;
import static com.squareup.wire.Message.Datatype.UINT64;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class WealthDrawRecord extends Message {

  public static final Long DEFAULT_MONEY = 0L;
  public static final WealthDrawState DEFAULT_STATE = WealthDrawState.DrawStateCheck;
  public static final Long DEFAULT_TIME = 0L;
  public static final DrawMode DEFAULT_DRAWMODE = DrawMode.DrawMode_Normal;
  public static final Float DEFAULT_MYMONEY = 0F;
  public static final Float DEFAULT_TAXMONEY = 0F;

  @ProtoField(tag = 1, type = UINT64, label = REQUIRED)
  public final Long money;

  /**
   * 提现总值
   */
  @ProtoField(tag = 2, type = ENUM, label = REQUIRED)
  public final WealthDrawState state;

  @ProtoField(tag = 3, type = UINT64, label = REQUIRED)
  public final Long time;

  @ProtoField(tag = 4, type = ENUM)
  public final DrawMode drawMode;

  /**
   * 提现方式
   */
  @ProtoField(tag = 5, type = FLOAT)
  public final Float myMoney;

  /**
   * 获得钱值
   */
  @ProtoField(tag = 6, type = FLOAT)
  public final Float taxMoney;

  private WealthDrawRecord(Builder builder) {
    this.money = builder.money;
    this.state = builder.state;
    this.time = builder.time;
    this.drawMode = builder.drawMode;
    this.myMoney = builder.myMoney;
    this.taxMoney = builder.taxMoney;
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof WealthDrawRecord)) return false;
    WealthDrawRecord o = (WealthDrawRecord) other;
    return equals(money, o.money)
        && equals(state, o.state)
        && equals(time, o.time)
        && equals(drawMode, o.drawMode)
        && equals(myMoney, o.myMoney)
        && equals(taxMoney, o.taxMoney);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = money != null ? money.hashCode() : 0;
      result = result * 37 + (state != null ? state.hashCode() : 0);
      result = result * 37 + (time != null ? time.hashCode() : 0);
      result = result * 37 + (drawMode != null ? drawMode.hashCode() : 0);
      result = result * 37 + (myMoney != null ? myMoney.hashCode() : 0);
      result = result * 37 + (taxMoney != null ? taxMoney.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<WealthDrawRecord> {

    public Long money;
    public WealthDrawState state;
    public Long time;
    public DrawMode drawMode;
    public Float myMoney;
    public Float taxMoney;

    public Builder() {
    }

    public Builder(WealthDrawRecord message) {
      super(message);
      if (message == null) return;
      this.money = message.money;
      this.state = message.state;
      this.time = message.time;
      this.drawMode = message.drawMode;
      this.myMoney = message.myMoney;
      this.taxMoney = message.taxMoney;
    }

    public Builder money(Long money) {
      this.money = money;
      return this;
    }

    /**
     * 提现总值
     */
    public Builder state(WealthDrawState state) {
      this.state = state;
      return this;
    }

    public Builder time(Long time) {
      this.time = time;
      return this;
    }

    public Builder drawMode(DrawMode drawMode) {
      this.drawMode = drawMode;
      return this;
    }

    /**
     * 提现方式
     */
    public Builder myMoney(Float myMoney) {
      this.myMoney = myMoney;
      return this;
    }

    /**
     * 获得钱值
     */
    public Builder taxMoney(Float taxMoney) {
      this.taxMoney = taxMoney;
      return this;
    }

    @Override
    public WealthDrawRecord build() {
      checkRequiredFields();
      return new WealthDrawRecord(this);
    }
  }

  public static Builder newBuilder() {
    return new Builder();
  }
}
